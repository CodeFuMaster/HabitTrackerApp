// <auto-generated />
using System;
using HabitTrackerApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HabitTrackerApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251006095754_ExpandHabitMetadata")]
    partial class ExpandHabitMetadata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("HabitTrackerApp.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.DailyHabitEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CheckedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("HabitId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reflection")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HabitId");

                    b.ToTable("DailyHabitEntries");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.DailyMetricValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BooleanValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DailyHabitEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HabitMetricDefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("NumericValue")
                        .HasColumnType("REAL");

                    b.Property<string>("TextValue")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DailyHabitEntryId");

                    b.HasIndex("HabitMetricDefinitionId");

                    b.ToTable("DailyMetricValues");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentUrls")
                        .HasColumnType("TEXT");

                    b.Property<string>("Equipment")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExerciseType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("HabitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalVideoPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("MuscleGroups")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RestSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TargetDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TargetRPE")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TargetReps")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TargetSets")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TargetWeight")
                        .HasColumnType("REAL");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HabitId");

                    b.HasIndex("OrderIndex");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.ExerciseLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActualDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActualRPE")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActualReps")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ActualWeight")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DailyHabitEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("SetNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DailyHabitEntryId");

                    b.HasIndex("Date");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseLogs");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.Habit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HabitType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MonthlyDays")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecurrenceInterval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecurrenceType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReminderEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("ReminderTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SpecificDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("TimeOfDay")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("TimeOfDayEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("WeeklyDays")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Habits");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.HabitMetricDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HabitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HabitId");

                    b.ToTable("HabitMetricDefinitions");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.DailyHabitEntry", b =>
                {
                    b.HasOne("HabitTrackerApp.Models.Habit", "Habit")
                        .WithMany("DailyHabitEntries")
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habit");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.DailyMetricValue", b =>
                {
                    b.HasOne("HabitTrackerApp.Models.DailyHabitEntry", "DailyHabitEntry")
                        .WithMany("DailyMetricValues")
                        .HasForeignKey("DailyHabitEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HabitTrackerApp.Models.HabitMetricDefinition", "HabitMetricDefinition")
                        .WithMany()
                        .HasForeignKey("HabitMetricDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DailyHabitEntry");

                    b.Navigation("HabitMetricDefinition");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.Exercise", b =>
                {
                    b.HasOne("HabitTrackerApp.Models.Habit", "Habit")
                        .WithMany("Exercises")
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habit");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.ExerciseLog", b =>
                {
                    b.HasOne("HabitTrackerApp.Models.DailyHabitEntry", "DailyHabitEntry")
                        .WithMany()
                        .HasForeignKey("DailyHabitEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HabitTrackerApp.Models.Exercise", "Exercise")
                        .WithMany("ExerciseLogs")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyHabitEntry");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.Habit", b =>
                {
                    b.HasOne("HabitTrackerApp.Models.Category", "Category")
                        .WithMany("Habits")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.HabitMetricDefinition", b =>
                {
                    b.HasOne("HabitTrackerApp.Models.Habit", "Habit")
                        .WithMany()
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habit");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.Category", b =>
                {
                    b.Navigation("Habits");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.DailyHabitEntry", b =>
                {
                    b.Navigation("DailyMetricValues");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.Exercise", b =>
                {
                    b.Navigation("ExerciseLogs");
                });

            modelBuilder.Entity("HabitTrackerApp.Models.Habit", b =>
                {
                    b.Navigation("DailyHabitEntries");

                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
